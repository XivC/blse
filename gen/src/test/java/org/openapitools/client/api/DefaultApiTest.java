/*
 * Rubbable api
 * Dybov's and Lavrov's blse lab
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateTournamentDto;
import org.openapitools.client.model.GameDto;
import org.openapitools.client.model.ListTournamentDto;
import org.openapitools.client.model.MatchDto;
import org.openapitools.client.model.RetrieveTournamentDto;
import org.openapitools.client.model.TeamDto;
import org.openapitools.client.model.UserDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Approve game
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gamesGameIdApprovePostTest() throws ApiException {
        Integer userId = null;
        Integer gameId = null;
        GameDto response = api.gamesGameIdApprovePost(userId, gameId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Disapprove game
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gamesGameIdDisapprovePostTest() throws ApiException {
        Integer userId = null;
        Integer gameId = null;
        GameDto response = api.gamesGameIdDisapprovePost(userId, gameId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Drop match games
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void matchesMatchIdDropPostTest() throws ApiException {
        Integer userId = null;
        Integer matchId = null;
        MatchDto response = api.matchesMatchIdDropPost(userId, matchId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add game to match
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void matchesMatchIdPlayGamePostTest() throws ApiException {
        Integer userId = null;
        Integer matchId = null;
        Integer winnerId = null;
        MatchDto response = api.matchesMatchIdPlayGamePost(userId, matchId, winnerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get teams list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsGetTest() throws ApiException {
        Integer userId = null;
        List<TeamDto> response = api.teamsGet(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get team by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsIdGetTest() throws ApiException {
        Integer userId = null;
        Integer id = null;
        List<TeamDto> response = api.teamsIdGet(userId, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get all Tournaments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tournamentsGetTest() throws ApiException {
        Integer userId = null;
        List<ListTournamentDto> response = api.tournamentsGet(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create new tournament
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tournamentsPostTest() throws ApiException {
        Integer userId = null;
        CreateTournamentDto body = null;
        RetrieveTournamentDto response = api.tournamentsPost(userId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get self user profile info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersMeGetTest() throws ApiException {
        Integer userId = null;
        UserDto response = api.usersMeGet(userId);

        // TODO: test validations
    }
    
}
