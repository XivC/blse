/*
 * Rubbable api
 * Dybov's and Lavrov's blse lab
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateTournamentDto;
import org.openapitools.client.model.GameDto;
import org.openapitools.client.model.ListTournamentDto;
import org.openapitools.client.model.MatchDto;
import org.openapitools.client.model.RetrieveTournamentDto;
import org.openapitools.client.model.TeamDto;
import org.openapitools.client.model.UserDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for gamesGameIdApprovePost
     * @param userId  (required)
     * @param gameId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdApprovePostCall(Integer userId, Integer gameId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{game-id}/approve/"
            .replaceAll("\\{" + "game-id" + "\\}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarHeaderParams.put("user-id", localVarApiClient.parameterToString(userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameIdApprovePostValidateBeforeCall(Integer userId, Integer gameId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling gamesGameIdApprovePost(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling gamesGameIdApprovePost(Async)");
        }
        

        okhttp3.Call localVarCall = gamesGameIdApprovePostCall(userId, gameId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Approve game
     * @param userId  (required)
     * @param gameId  (required)
     * @return GameDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public GameDto gamesGameIdApprovePost(Integer userId, Integer gameId) throws ApiException {
        ApiResponse<GameDto> localVarResp = gamesGameIdApprovePostWithHttpInfo(userId, gameId);
        return localVarResp.getData();
    }

    /**
     * 
     * Approve game
     * @param userId  (required)
     * @param gameId  (required)
     * @return ApiResponse&lt;GameDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameDto> gamesGameIdApprovePostWithHttpInfo(Integer userId, Integer gameId) throws ApiException {
        okhttp3.Call localVarCall = gamesGameIdApprovePostValidateBeforeCall(userId, gameId, null);
        Type localVarReturnType = new TypeToken<GameDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Approve game
     * @param userId  (required)
     * @param gameId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdApprovePostAsync(Integer userId, Integer gameId, final ApiCallback<GameDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameIdApprovePostValidateBeforeCall(userId, gameId, _callback);
        Type localVarReturnType = new TypeToken<GameDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesGameIdDisapprovePost
     * @param userId  (required)
     * @param gameId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdDisapprovePostCall(Integer userId, Integer gameId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{game-id}/disapprove/"
            .replaceAll("\\{" + "game-id" + "\\}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarHeaderParams.put("user-id", localVarApiClient.parameterToString(userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameIdDisapprovePostValidateBeforeCall(Integer userId, Integer gameId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling gamesGameIdDisapprovePost(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling gamesGameIdDisapprovePost(Async)");
        }
        

        okhttp3.Call localVarCall = gamesGameIdDisapprovePostCall(userId, gameId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Disapprove game
     * @param userId  (required)
     * @param gameId  (required)
     * @return GameDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public GameDto gamesGameIdDisapprovePost(Integer userId, Integer gameId) throws ApiException {
        ApiResponse<GameDto> localVarResp = gamesGameIdDisapprovePostWithHttpInfo(userId, gameId);
        return localVarResp.getData();
    }

    /**
     * 
     * Disapprove game
     * @param userId  (required)
     * @param gameId  (required)
     * @return ApiResponse&lt;GameDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameDto> gamesGameIdDisapprovePostWithHttpInfo(Integer userId, Integer gameId) throws ApiException {
        okhttp3.Call localVarCall = gamesGameIdDisapprovePostValidateBeforeCall(userId, gameId, null);
        Type localVarReturnType = new TypeToken<GameDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disapprove game
     * @param userId  (required)
     * @param gameId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdDisapprovePostAsync(Integer userId, Integer gameId, final ApiCallback<GameDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameIdDisapprovePostValidateBeforeCall(userId, gameId, _callback);
        Type localVarReturnType = new TypeToken<GameDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for matchesMatchIdDropPost
     * @param userId  (required)
     * @param matchId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchesMatchIdDropPostCall(Integer userId, Integer matchId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/matches/{match-id}/drop/"
            .replaceAll("\\{" + "match-id" + "\\}", localVarApiClient.escapeString(matchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarHeaderParams.put("user-id", localVarApiClient.parameterToString(userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call matchesMatchIdDropPostValidateBeforeCall(Integer userId, Integer matchId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling matchesMatchIdDropPost(Async)");
        }
        
        // verify the required parameter 'matchId' is set
        if (matchId == null) {
            throw new ApiException("Missing the required parameter 'matchId' when calling matchesMatchIdDropPost(Async)");
        }
        

        okhttp3.Call localVarCall = matchesMatchIdDropPostCall(userId, matchId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Drop match games
     * @param userId  (required)
     * @param matchId  (required)
     * @return MatchDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MatchDto matchesMatchIdDropPost(Integer userId, Integer matchId) throws ApiException {
        ApiResponse<MatchDto> localVarResp = matchesMatchIdDropPostWithHttpInfo(userId, matchId);
        return localVarResp.getData();
    }

    /**
     * 
     * Drop match games
     * @param userId  (required)
     * @param matchId  (required)
     * @return ApiResponse&lt;MatchDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchDto> matchesMatchIdDropPostWithHttpInfo(Integer userId, Integer matchId) throws ApiException {
        okhttp3.Call localVarCall = matchesMatchIdDropPostValidateBeforeCall(userId, matchId, null);
        Type localVarReturnType = new TypeToken<MatchDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Drop match games
     * @param userId  (required)
     * @param matchId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchesMatchIdDropPostAsync(Integer userId, Integer matchId, final ApiCallback<MatchDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = matchesMatchIdDropPostValidateBeforeCall(userId, matchId, _callback);
        Type localVarReturnType = new TypeToken<MatchDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for matchesMatchIdPlayGamePost
     * @param userId  (required)
     * @param matchId  (required)
     * @param winnerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchesMatchIdPlayGamePostCall(Integer userId, Integer matchId, Integer winnerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/matches/{match-id}/play-game/"
            .replaceAll("\\{" + "match-id" + "\\}", localVarApiClient.escapeString(matchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (winnerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("winnerId", winnerId));
        }

        if (userId != null) {
            localVarHeaderParams.put("user-id", localVarApiClient.parameterToString(userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call matchesMatchIdPlayGamePostValidateBeforeCall(Integer userId, Integer matchId, Integer winnerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling matchesMatchIdPlayGamePost(Async)");
        }
        
        // verify the required parameter 'matchId' is set
        if (matchId == null) {
            throw new ApiException("Missing the required parameter 'matchId' when calling matchesMatchIdPlayGamePost(Async)");
        }
        
        // verify the required parameter 'winnerId' is set
        if (winnerId == null) {
            throw new ApiException("Missing the required parameter 'winnerId' when calling matchesMatchIdPlayGamePost(Async)");
        }
        

        okhttp3.Call localVarCall = matchesMatchIdPlayGamePostCall(userId, matchId, winnerId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add game to match
     * @param userId  (required)
     * @param matchId  (required)
     * @param winnerId  (required)
     * @return MatchDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public MatchDto matchesMatchIdPlayGamePost(Integer userId, Integer matchId, Integer winnerId) throws ApiException {
        ApiResponse<MatchDto> localVarResp = matchesMatchIdPlayGamePostWithHttpInfo(userId, matchId, winnerId);
        return localVarResp.getData();
    }

    /**
     * 
     * Add game to match
     * @param userId  (required)
     * @param matchId  (required)
     * @param winnerId  (required)
     * @return ApiResponse&lt;MatchDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchDto> matchesMatchIdPlayGamePostWithHttpInfo(Integer userId, Integer matchId, Integer winnerId) throws ApiException {
        okhttp3.Call localVarCall = matchesMatchIdPlayGamePostValidateBeforeCall(userId, matchId, winnerId, null);
        Type localVarReturnType = new TypeToken<MatchDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add game to match
     * @param userId  (required)
     * @param matchId  (required)
     * @param winnerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchesMatchIdPlayGamePostAsync(Integer userId, Integer matchId, Integer winnerId, final ApiCallback<MatchDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = matchesMatchIdPlayGamePostValidateBeforeCall(userId, matchId, winnerId, _callback);
        Type localVarReturnType = new TypeToken<MatchDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGet
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetCall(Integer userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarHeaderParams.put("user-id", localVarApiClient.parameterToString(userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling teamsGet(Async)");
        }
        

        okhttp3.Call localVarCall = teamsGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get teams list
     * @param userId  (required)
     * @return List&lt;TeamDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamDto> teamsGet(Integer userId) throws ApiException {
        ApiResponse<List<TeamDto>> localVarResp = teamsGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get teams list
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;TeamDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamDto>> teamsGetWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = teamsGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<TeamDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get teams list
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetAsync(Integer userId, final ApiCallback<List<TeamDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<TeamDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsIdGet
     * @param userId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdGetCall(Integer userId, Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarHeaderParams.put("user-id", localVarApiClient.parameterToString(userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsIdGetValidateBeforeCall(Integer userId, Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling teamsIdGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = teamsIdGetCall(userId, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get team by id
     * @param userId  (required)
     * @param id  (required)
     * @return List&lt;TeamDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user found </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamDto> teamsIdGet(Integer userId, Integer id) throws ApiException {
        ApiResponse<List<TeamDto>> localVarResp = teamsIdGetWithHttpInfo(userId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get team by id
     * @param userId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;TeamDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamDto>> teamsIdGetWithHttpInfo(Integer userId, Integer id) throws ApiException {
        okhttp3.Call localVarCall = teamsIdGetValidateBeforeCall(userId, id, null);
        Type localVarReturnType = new TypeToken<List<TeamDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get team by id
     * @param userId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdGetAsync(Integer userId, Integer id, final ApiCallback<List<TeamDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsIdGetValidateBeforeCall(userId, id, _callback);
        Type localVarReturnType = new TypeToken<List<TeamDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tournamentsGet
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tournaments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tournamentsGetCall(Integer userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tournaments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarHeaderParams.put("user-id", localVarApiClient.parameterToString(userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tournamentsGetValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling tournamentsGet(Async)");
        }
        

        okhttp3.Call localVarCall = tournamentsGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * get all Tournaments
     * @param userId  (required)
     * @return List&lt;ListTournamentDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tournaments </td><td>  -  </td></tr>
     </table>
     */
    public List<ListTournamentDto> tournamentsGet(Integer userId) throws ApiException {
        ApiResponse<List<ListTournamentDto>> localVarResp = tournamentsGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * get all Tournaments
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;ListTournamentDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tournaments </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListTournamentDto>> tournamentsGetWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = tournamentsGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<ListTournamentDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get all Tournaments
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tournaments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tournamentsGetAsync(Integer userId, final ApiCallback<List<ListTournamentDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tournamentsGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<ListTournamentDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tournamentsPost
     * @param userId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tournamentsPostCall(Integer userId, CreateTournamentDto body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tournaments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarHeaderParams.put("user-id", localVarApiClient.parameterToString(userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tournamentsPostValidateBeforeCall(Integer userId, CreateTournamentDto body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling tournamentsPost(Async)");
        }
        

        okhttp3.Call localVarCall = tournamentsPostCall(userId, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create new tournament
     * @param userId  (required)
     * @param body  (optional)
     * @return RetrieveTournamentDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveTournamentDto tournamentsPost(Integer userId, CreateTournamentDto body) throws ApiException {
        ApiResponse<RetrieveTournamentDto> localVarResp = tournamentsPostWithHttpInfo(userId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create new tournament
     * @param userId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;RetrieveTournamentDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveTournamentDto> tournamentsPostWithHttpInfo(Integer userId, CreateTournamentDto body) throws ApiException {
        okhttp3.Call localVarCall = tournamentsPostValidateBeforeCall(userId, body, null);
        Type localVarReturnType = new TypeToken<RetrieveTournamentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new tournament
     * @param userId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tournamentsPostAsync(Integer userId, CreateTournamentDto body, final ApiCallback<RetrieveTournamentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = tournamentsPostValidateBeforeCall(userId, body, _callback);
        Type localVarReturnType = new TypeToken<RetrieveTournamentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersMeGet
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeGetCall(Integer userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarHeaderParams.put("user-id", localVarApiClient.parameterToString(userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersMeGetValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersMeGet(Async)");
        }
        

        okhttp3.Call localVarCall = usersMeGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get self user profile info
     * @param userId  (required)
     * @return UserDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public UserDto usersMeGet(Integer userId) throws ApiException {
        ApiResponse<UserDto> localVarResp = usersMeGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get self user profile info
     * @param userId  (required)
     * @return ApiResponse&lt;UserDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDto> usersMeGetWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = usersMeGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get self user profile info
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeGetAsync(Integer userId, final ApiCallback<UserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersMeGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
